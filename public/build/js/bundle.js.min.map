{"version":3,"sources":["horas.js","ponentes.js","tags.js"],"names":["document","querySelector","console","warn","categoria","dias","querySelectorAll","inputHiddenDias","inputHiddenHoras","length","error","busqueda","categoria_id","value","dia","terminoBusqueda","e","log","target","name","horaPrevia","classList","remove","Object","values","includes","buscarEventos","async","baseUrl","window","BASE_URL","url","respuesta","fetch","ok","Error","status","resultado","json","resultados","listadoHoras","forEach","li","add","horasTomadas","map","hora_id","listadoHorasArray","Array","from","filter","dataset","horaId","horasDisponibles","hora","addEventListener","seleccionarHora","obtenetHorasDisponibles","marcarHoraSeleccionada","id","horaSeleccionada","contains","seleccionPrevia","diaSeleccionado","iniciarApp","ponentesInput","ponentes","ponentesFiltrados","listadoPonentes","ponenteHidden","seleccionarPonente","item","ponenteId","arrayPonentes","ponente","nombre","trim","apellido","formatearPonentes","obtenerPonentes","expresion","RegExp","test","toLowerCase","firstChild","removeChild","ponenteHTML","createElement","textContent","onclick","appendChild","noResultados","mostrarPonentes","obtenerPonente","ponenteDOM","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","tag","etiqueta","ondblclick","eliminarTag","join","split","keyCode","preventDefault"],"mappings":"CAAA,WAGA,IAFAA,SAAAC,cAAA,UAIA,YADAC,QAAAC,KAAA,kDAIA,MAAAC,EAAAJ,SAAAC,cAAA,yBACAI,EAAAL,SAAAM,iBAAA,gBACAC,EAAAP,SAAAC,cAAA,mBACAO,EAAAR,SAAAC,cAAA,oBAEA,IAAAG,GAAA,IAAAC,EAAAI,SAAAF,IAAAC,EAEA,YADAN,QAAAQ,MAAA,gDAKA,IAAAC,EAAA,CACAC,aAAAR,EAAAS,OAAA,GACAC,KAAAP,EAAAM,OAAA,IAsBA,SAAAE,EAAAC,GACAd,QAAAe,IAAA,wBAAAD,EAAAE,OAAAC,KAAAH,EAAAE,OAAAL,OACAF,EAAAK,EAAAE,OAAAC,MAAAH,EAAAE,OAAAL,MAGAL,EAAAK,MAAA,GACAN,EAAAM,MAAA,GAGA,MAAAO,EAAApB,SAAAC,cAAA,8BACAmB,GACAA,EAAAC,UAAAC,OAAA,6BAGAC,OAAAC,OAAAb,GAAAc,SAAA,IACAvB,QAAAe,IAAA,8CAKAS,IAGAC,eAAAD,IACA,MAAAE,EAAAC,OAAAC,UACAhB,IAAAA,EAAAF,aAAAA,GAAAD,EAEA,IAAAiB,EAEA,YADA1B,QAAAQ,MAAA,6BAIA,MAAAqB,EAAA,GAAAH,+BAAAd,kBAAAF,IACAV,QAAAe,IAAA,2BAAAc,GAEA,IACA,MAAAC,QAAAC,MAAAF,GACA,IAAAC,EAAAE,GACA,MAAA,IAAAC,MAAA,uBAAAH,EAAAI,QAEA,MAAAC,QAAAL,EAAAM,OACApC,QAAAe,IAAA,qBAAAoB,GAUA,SAAAE,GACArC,QAAAe,IAAA,qCACA,MAAAuB,EAAAxC,SAAAM,iBAAA,aAGAkC,EAAAC,QAAAC,GAAAA,EAAArB,UAAAsB,IAAA,+BAGA,MAAAC,EAAAL,EAAAM,IAAAR,GAAAA,EAAAS,SACA5C,QAAAe,IAAA,iBAAA2B,GAGA,MAAAG,EAAAC,MAAAC,KAAAT,GACAO,EAAAG,OAAAR,IAAAE,EAAAnB,UAAAiB,EAAAS,QAAAC,SAGAX,QAAAC,GAAAA,EAAArB,UAAAC,OAAA,+BAGA,MAAA+B,EAAArD,SAAAM,iBAAA,8CACA+C,EAAAZ,QAAAa,GAAAA,EAAAC,iBAAA,QAAAC,IAEAtD,QAAAe,IAAA,sBAAAoC,EAAA5C,QA9BAgD,CAAApB,GACAqB,IAEA,MAAAhD,GACAR,QAAAQ,MAAA,2BAAAA,IA6BA,SAAAgD,IACA,MAAAC,EAAAnD,EAAAK,MAGA,GAFAX,QAAAe,IAAA,iCAAA0C,IAEAA,EAEA,YADAzD,QAAAe,IAAA,yCAIA,MAAA2C,EAAA5D,SAAAC,cAAA,kBAAA0D,OACA,GAAAC,EAAA,CAEAA,EAAAvC,UAAAwC,SAAA,gCACA3D,QAAAe,IAAA,qEACA2C,EAAAvC,UAAAC,OAAA,+BAGA,MAAAwC,EAAA9D,SAAAC,cAAA,8BACA6D,GACAA,EAAAzC,UAAAC,OAAA,6BAEAsC,EAAAvC,UAAAsB,IAAA,kCAEAzC,QAAAC,KAAA,4CAAAwD,mBAIA,SAAAH,EAAAxC,GACA,MAAAI,EAAApB,SAAAC,cAAA,8BACAmB,GACAA,EAAAC,UAAAC,OAAA,6BAGAN,EAAAE,OAAAG,UAAAsB,IAAA,6BAEAnC,EAAAK,MAAAG,EAAAE,OAAAiC,QAAAC,OAEA,MAAAW,EAAA/D,SAAAC,cAAA,wBACA8D,IACAxD,EAAAM,MAAAkD,EAAAlD,MACAF,EAAAG,IAAAiD,EAAAlD,OAGAX,QAAAe,IAAA,sBAAAT,EAAAK,4BAAAN,EAAAM,SA1IAX,QAAAe,IAAA,2BAAAN,GAGAP,EAAAmD,iBAAA,SAAAxC,GACAV,EAAAoC,QAAA3B,GAAAA,EAAAyC,iBAAA,SAAAxC,IAGAQ,OAAAC,OAAAb,GAAAc,SAAA,IAGAvB,QAAAe,IAAA,qDAGAU,iBACAzB,QAAAe,IAAA,4CACAS,IACAgC,IARAM,GAhCA,GCAA,WACA,MAAAC,EAAAjE,SAAAC,cAAA,aAEA,GAAAgE,EAAA,CACA,IAAAC,EAAA,GACAC,EAAA,GAEA,MAAAC,EAAApE,SAAAC,cAAA,qBACAoE,EAAArE,SAAAC,cAAA,uBA+GA,SAAAqE,EAAAtD,GAEAhB,SAAAM,iBAAA,4CACAmC,QAAA8B,GAAAA,EAAAlD,UAAAC,OAAA,4CAGAN,EAAAE,OAAAG,UAAAsB,IAAA,2CAEA0B,EAAAxD,MAAAG,EAAAE,OAAAiC,QAAAqB,WAnGA7C,iBACA,MAAAC,EAAAC,OAAAC,SAEA,IAAAF,EAEA,YADA1B,QAAAQ,MAAA,6BAIA,MAAAqB,EAAAH,EAAA,eAEA,IACA,MAAAI,QAAAC,MAAAF,GACAM,QAAAL,EAAAM,OAEA4B,EAwBA,SAAAO,EAAA,IACA,OAAAA,EAAA5B,IAAA6B,IACA,CACAC,OAAA,GAAAD,EAAAC,OAAAC,UAAAF,EAAAG,SAAAD,SACAjB,GAAAe,EAAAf,MA5BAmB,CAAAzC,GAEA,MAAA3B,GACAR,QAAAQ,MAAA,2BAAAA,IAlCAqE,GAEAd,EAAAV,iBAAA,SA8DA,SAAAvC,GACA,MAAAL,EAAAK,EAAAE,OAAAL,MAEA,GAAAF,EAAAF,OAAA,EAAA,CACA,MAAAuE,EAAA,IAAAC,OAAAtE,EAAA,KACAwD,EAAAD,EAAAhB,OAAAwB,GACAM,EAAAE,KAAAR,EAAAC,OAAAQ,qBAIAhB,EAAA,IAMA,WACA,KAAAC,EAAAgB,YACAhB,EAAAiB,YAAAjB,EAAAgB,YAGA,GAAAjB,EAAA1D,OAAA,EAEA0D,EAAA1B,QAAAiC,IAEA,MAAAY,EAAAtF,SAAAuF,cAAA,MACAD,EAAAjE,UAAAsB,IAAA,6BACA2C,EAAAE,YAAAd,EAAAC,OACAW,EAAAnC,QAAAqB,UAAAE,EAAAf,GACA2B,EAAAG,QAAAnB,EAEAF,EAAAsB,YAAAJ,SAGA,CACA,MAAAK,EAAA3F,SAAAuF,cAAA,KACAI,EAAAtE,UAAAsB,IAAA,kCACAgD,EAAAH,YAAA,uCACApB,EAAAsB,YAAAC,IAzBAC,MAzEAvB,EAAAxD,OACA,WACA,MAAA6D,QAgCA/C,eAAAgC,GAEA,MAAA/B,EAAAC,OAAAC,SAEA,IAAAF,EAEA,YADA1B,QAAAQ,MAAA,6BAIA,MAAAqB,EAAA,GAAAH,mBAAA+B,IACA3B,QAAAC,MAAAF,GAEA,aADAC,EAAAM,OA3CAuD,CAAAxB,EAAAxD,OACAiF,EAAA9F,SAAAuF,cAAA,MACAO,EAAAzE,UAAAsB,IAAA,4BAAA,2CACAmD,EAAAN,YAAA,GAAAd,EAAAC,UAAAD,EAAAG,WACAT,EAAAsB,YAAAI,IALA,IAhBA,GCAA9F,SAAAuD,iBAAA,oBAAA,WACA,MAAAwC,EAAA/F,SAAAC,cAAA,gBACA+F,EAAAhG,SAAAC,cAAA,SACAgG,EAAAjG,SAAAC,cAAA,iBAEA,IAAAiG,EAAA,GAuBA,SAAAC,IACAH,EAAAR,YAAA,GACAU,EAAAzD,QAAA2D,IACA,MAAAC,EAAArG,SAAAuF,cAAA,MACAc,EAAAhF,UAAAsB,IAAA,mBACA0D,EAAAb,YAAAY,EACAC,EAAAC,WAAAC,EACAP,EAAAN,YAAAW,KAWAJ,EAAApF,MAAAqF,EAAAM,KAAA,KANA,SAAAD,EAAAvF,GACAkF,EAAAA,EAAAhD,OAAAkD,GAAAA,IAAApF,EAAAE,OAAAsE,aACAW,IAnCAF,GAAA,KAAAA,EAAApF,QACAqF,EAAAD,EAAApF,MAAA4F,MAAA,KACAN,KAGAJ,GACAA,EAAAxC,iBAAA,YAGA,SAAAvC,GACA,GAAA,KAAAA,EAAA0F,QAAA,CACA,GAAA,IAAA1F,EAAAE,OAAAL,MAAA+D,OAAAnE,OAAA,OAEAO,EAAA2F,iBACAT,EAAA,IAAAA,EAAAlF,EAAAE,OAAAL,MAAA+D,QACAmB,EAAAlF,MAAA,GAEAsF","file":"bundle.js","sourcesContent":["(function () {\r\n    const horas = document.querySelector('#horas');\r\n\r\n    if (!horas) {\r\n        console.warn('No se encontró el contenedor de horas (#horas)');\r\n        return;\r\n    }\r\n\r\n    const categoria = document.querySelector('[name=\"categoria_id\"]');\r\n    const dias = document.querySelectorAll('[name=\"dia\"]');\r\n    const inputHiddenDias = document.querySelector('[name=\"dia_id\"]');\r\n    const inputHiddenHoras = document.querySelector('[name=\"hora_id\"]');\r\n\r\n    if (!categoria || dias.length === 0 || !inputHiddenDias || !inputHiddenHoras) {\r\n        console.error('Faltan campos obligatorios en el formulario.');\r\n        return;\r\n    }\r\n\r\n    // Estado de búsqueda actual\r\n    let busqueda = {\r\n        categoria_id: categoria.value || '',\r\n        dia: +inputHiddenDias.value || ''\r\n    };\r\n\r\n    console.log('Estado inicial busqueda:', busqueda);\r\n\r\n    // Escuchar cambios para volver a buscar eventos\r\n    categoria.addEventListener('change', terminoBusqueda);\r\n    dias.forEach(dia => dia.addEventListener('change', terminoBusqueda));\r\n\r\n    // Iniciar la app\r\n    if (!Object.values(busqueda).includes('')) {\r\n        iniciarApp();\r\n    } else {\r\n        console.log('Faltan datos para iniciar la búsqueda de eventos.');\r\n    }\r\n\r\n    async function iniciarApp() {\r\n        console.log('Iniciando app, buscando eventos...');\r\n        await buscarEventos();\r\n        marcarHoraSeleccionada();\r\n    }\r\n\r\n    function terminoBusqueda(e) {\r\n        console.log('Cambio en formulario:', e.target.name, e.target.value);\r\n        busqueda[e.target.name] = e.target.value;\r\n\r\n        // Resetear selección de hora y día hidden\r\n        inputHiddenHoras.value = '';\r\n        inputHiddenDias.value = '';\r\n\r\n        // Quitar selección previa visible\r\n        const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n        if (horaPrevia) {\r\n            horaPrevia.classList.remove('horas__hora--seleccionada');\r\n        }\r\n\r\n        if (Object.values(busqueda).includes('')) {\r\n            console.log('Datos incompletos, no se realiza búsqueda.');\r\n            return;\r\n        }\r\n\r\n        // Ejecutar nueva búsqueda\r\n        buscarEventos();\r\n    }\r\n\r\n    async function buscarEventos() {\r\n        const baseUrl = window.BASE_URL;\r\n        const { dia, categoria_id } = busqueda;\r\n\r\n        if (!baseUrl) {\r\n            console.error('BASE_URL no está definida');\r\n            return;\r\n        }\r\n\r\n        const url = `${baseUrl}api/eventos-horario?dia_id=${dia}&categoria_id=${categoria_id}`;\r\n        console.log('Buscando eventos en URL:', url);\r\n\r\n        try {\r\n            const respuesta = await fetch(url);\r\n            if (!respuesta.ok) {\r\n                throw new Error(`HTTP error! status: ${respuesta.status}`);\r\n            }\r\n            const resultado = await respuesta.json();\r\n            console.log('Eventos recibidos:', resultado);\r\n\r\n            obtenetHorasDisponibles(resultado);\r\n            marcarHoraSeleccionada();\r\n\r\n        } catch (error) {\r\n            console.error('Error al buscar eventos:', error);\r\n        }\r\n    }\r\n\r\n    function obtenetHorasDisponibles(resultados) {\r\n        console.log('Actualizando horas disponibles...');\r\n        const listadoHoras = document.querySelectorAll('#horas li');\r\n\r\n        // Marcar todas las horas como deshabilitadas primero\r\n        listadoHoras.forEach(li => li.classList.add('horas__hora--deshabilitado'));\r\n\r\n        // Obtener IDs de horas tomadas\r\n        const horasTomadas = resultados.map(resultado => resultado.hora_id);\r\n        console.log('Horas tomadas:', horasTomadas);\r\n\r\n        // Filtrar horas libres\r\n        const listadoHorasArray = Array.from(listadoHoras);\r\n        const resultadoFinal = listadoHorasArray.filter(li => !horasTomadas.includes(+li.dataset.horaId));\r\n\r\n        // Quitar deshabilitado solo en horas libres\r\n        resultadoFinal.forEach(li => li.classList.remove('horas__hora--deshabilitado'));\r\n\r\n        // Añadir evento click solo a horas disponibles\r\n        const horasDisponibles = document.querySelectorAll('#horas li:not(.horas__hora--deshabilitado)');\r\n        horasDisponibles.forEach(hora => hora.addEventListener('click', seleccionarHora));\r\n\r\n        console.log(`Horas habilitadas: ${horasDisponibles.length}`);\r\n    }\r\n\r\n    function marcarHoraSeleccionada() {\r\n        const id = inputHiddenHoras.value;\r\n        console.log('Hora seleccionada actualmente:', id);\r\n\r\n        if (!id) {\r\n            console.log('No hay hora seleccionada para marcar.');\r\n            return;\r\n        }\r\n\r\n        const horaSeleccionada = document.querySelector(`[data-hora-id=\"${id}\"]`);\r\n        if (horaSeleccionada) {\r\n            // Asegurarse que esté habilitada y seleccionada\r\n            if (horaSeleccionada.classList.contains('horas__hora--deshabilitado')) {\r\n                console.log('Hora seleccionada estaba deshabilitada, habilitando para edición.');\r\n                horaSeleccionada.classList.remove('horas__hora--deshabilitado');\r\n            }\r\n            // Quitar selección previa si existe\r\n            const seleccionPrevia = document.querySelector('.horas__hora--seleccionada');\r\n            if (seleccionPrevia) {\r\n                seleccionPrevia.classList.remove('horas__hora--seleccionada');\r\n            }\r\n            horaSeleccionada.classList.add('horas__hora--seleccionada');\r\n        } else {\r\n            console.warn(`No se encontró la hora con data-hora-id=\"${id}\" para marcar.`);\r\n        }\r\n    }\r\n\r\n    function seleccionarHora(e) {\r\n        const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n        if (horaPrevia) {\r\n            horaPrevia.classList.remove('horas__hora--seleccionada');\r\n        }\r\n\r\n        e.target.classList.add('horas__hora--seleccionada');\r\n\r\n        inputHiddenHoras.value = e.target.dataset.horaId;\r\n\r\n        const diaSeleccionado = document.querySelector('[name=\"dia\"]:checked');\r\n        if (diaSeleccionado) {\r\n            inputHiddenDias.value = diaSeleccionado.value;\r\n            busqueda.dia = diaSeleccionado.value;\r\n        }\r\n\r\n        console.log(`Hora seleccionada: ${inputHiddenHoras.value}, Día seleccionado: ${inputHiddenDias.value}`);\r\n    }\r\n\r\n})();\r\n","(function(){\r\n    const ponentesInput = document.querySelector('#ponentes');\r\n\r\n    if (ponentesInput) {\r\n        let ponentes = [];\r\n        let ponentesFiltrados = [];\r\n\r\n       const listadoPonentes = document.querySelector('#listado-ponentes');\r\n       const ponenteHidden = document.querySelector('[name=\"ponente_id\"]');\r\n\r\n\r\n        obtenerPonentes();\r\n\r\n        ponentesInput.addEventListener('input', buscarPonentes);\r\n\r\n         if (ponenteHidden.value) {\r\n            (async() =>{\r\n                const ponente = await obtenerPonente(ponenteHidden.value);\r\n                const ponenteDOM = document.createElement('LI');\r\n                ponenteDOM.classList.add('listado-ponentes__ponente','listado-ponentes__ponente--seleccionado');\r\n                ponenteDOM.textContent = `${ponente.nombre} ${ponente.apellido}`;\r\nlistadoPonentes.appendChild(ponenteDOM);\r\n\r\n            })();\r\n        }\r\n\r\n\r\n\r\n        async function obtenerPonentes(){\r\n            const baseUrl = window.BASE_URL;\r\n\r\n            if (!baseUrl) {\r\n                console.error('BASE_URL no está definida');\r\n                return;\r\n            }\r\n\r\n            const url = `${baseUrl}api/ponentes`;\r\n\r\n            try {\r\n                const respuesta = await fetch(url);\r\n                const resultado = await respuesta.json();\r\n\r\n                ponentes = formatearPonentes(resultado);\r\n                \r\n            } catch (error) {\r\n                console.error('Error al buscar eventos:', error);\r\n            }\r\n        }\r\n\r\n        async function obtenerPonente(id){\r\n\r\n             const baseUrl = window.BASE_URL;\r\n\r\n        if (!baseUrl) {\r\n            console.error('BASE_URL no está definida');\r\n            return;\r\n        }\r\n\r\n             const url = `${baseUrl}api/ponente?id=${id}`;\r\n             const respuesta = await fetch(url);\r\n             const resultado = await respuesta.json();\r\n             return resultado;\r\n        }\r\n\r\n\r\n\r\n        function formatearPonentes(arrayPonentes = []) {\r\n            return arrayPonentes.map(ponente => {\r\n                return {\r\n                    nombre: `${ponente.nombre.trim()} ${ponente.apellido.trim()}`,\r\n                    id: ponente.id\r\n                }\r\n            });\r\n        }\r\n\r\n        function buscarPonentes(e){\r\n            const busqueda = e.target.value;\r\n\r\n            if (busqueda.length > 3) {\r\n                const expresion = new RegExp(busqueda, 'i');\r\n                ponentesFiltrados = ponentes.filter(ponente =>\r\n                    expresion.test(ponente.nombre.toLowerCase())\r\n                );\r\n                \r\n            } else {\r\n                ponentesFiltrados = [];\r\n                \r\n            }\r\n            mostrarPonentes();\r\n        }\r\n\r\n        function mostrarPonentes(){\r\n            while (listadoPonentes.firstChild) {\r\n                listadoPonentes.removeChild(listadoPonentes.firstChild);\r\n            }   \r\n\r\n            if (ponentesFiltrados.length > 0) {\r\n                \r\n                 ponentesFiltrados.forEach(ponente => {\r\n\r\n                const ponenteHTML = document.createElement('LI');\r\n                ponenteHTML.classList.add('listado-ponentes__ponente');\r\n                ponenteHTML.textContent = ponente.nombre;\r\n                ponenteHTML.dataset.ponenteId = ponente.id;\r\n                ponenteHTML.onclick = seleccionarPonente;\r\n\r\n                listadoPonentes.appendChild(ponenteHTML);\r\n\r\n            });\r\n            }else{\r\n                const noResultados = document.createElement('P');\r\n                noResultados.classList.add('listado-ponentes__no-resultado');\r\n                noResultados.textContent = 'No hay resultados para esta busqueda';\r\n                listadoPonentes.appendChild(noResultados);\r\n            }\r\n\r\n           \r\n        }\r\n\r\n        function seleccionarPonente(e){\r\n\r\n          document.querySelectorAll('.listado-ponentes__ponente--seleccionado')\r\n        .forEach(item => item.classList.remove('listado-ponentes__ponente--seleccionado'));\r\n\r\n    \r\n    e.target.classList.add('listado-ponentes__ponente--seleccionado');\r\n\r\n  ponenteHidden.value = e.target.dataset.ponenteId;\r\n\r\n        }\r\n    }\r\n})();\r\n","document.addEventListener('DOMContentLoaded', function () {\r\n  const tagsInput = document.querySelector('#tags__input');\r\n  const tagsDiv = document.querySelector('#tags');\r\n  const tagsInputHidden = document.querySelector('[name=\"tags\"]');\r\n\r\n  let tags = [];\r\n\r\n  if (tagsInputHidden && tagsInputHidden.value !== '') {\r\n    tags = tagsInputHidden.value.split(',');\r\n    mostrarTags();\r\n  }\r\n\r\n  if (tagsInput) {\r\n    tagsInput.addEventListener('keypress', guardarTags);\r\n  }\r\n\r\n  function guardarTags(e) {\r\n    if (e.keyCode === 44) {\r\n      if (e.target.value.trim().length === 0) return;\r\n\r\n      e.preventDefault();\r\n      tags = [...tags, e.target.value.trim()];\r\n      tagsInput.value = '';\r\n\r\n      mostrarTags();\r\n    }\r\n  }\r\n\r\n  function mostrarTags() {\r\n    tagsDiv.textContent = '';\r\n    tags.forEach(tag => {\r\n      const etiqueta = document.createElement('LI');\r\n      etiqueta.classList.add('formulario__tag');\r\n      etiqueta.textContent = tag;\r\n      etiqueta.ondblclick = eliminarTag;\r\n      tagsDiv.appendChild(etiqueta);\r\n    });\r\n    actualizarInputHidden();\r\n  }\r\n\r\n  function eliminarTag(e) {\r\n    tags = tags.filter(tag => tag !== e.target.textContent);\r\n    mostrarTags();\r\n  }\r\n\r\n  function actualizarInputHidden() {\r\n    tagsInputHidden.value = tags.join(',');\r\n  }\r\n});\r\n"]}